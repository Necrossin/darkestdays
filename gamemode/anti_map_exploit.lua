local table = table
local math = math
local pairs = pairs
local team = team

MapExploits = MapExploits or {}


function GM:SetExploitBoxes()
	
	local filename = "darkestdays/exploits/".. game.GetMap() ..".txt"
	
	local hasfolder = file.IsDir( "darkestdays/exploits", "DATA" )
	
	if not hasfolder then
		file.CreateDir( "darkestdays/exploits" )
	end
	
	local stuff_exists = false
	local to_check

	print"-- Checking Exploit Boxes"
	
	if file.Exists(filename,"DATA") then
		to_check = file.Read(filename,"DATA")
		stuff_exists = true
		print"File exists, using file"
	else
		if self.DefaultExploitBoxes and self.DefaultExploitBoxes[game.GetMap()] then
			to_check = self.DefaultExploitBoxes[game.GetMap()]
			stuff_exists = true
			print"No file, but table exists, using table"
		else
			--look for data_static folder (workshop_support)
			filename = "data_static/"..filename
			if file.Exists(filename,"GAME") then
				to_check = file.Read(filename,"GAME")
				stuff_exists = true
				print"File exists in 'data_static' folder, loading this one"
			end
		end
	end
	
	if stuff_exists and to_check then
		
		local tbl = util.JSONToTable( to_check )
		
		for i,stuff in pairs(tbl) do
			table.insert( MapExploits, { origin = Vector(stuff.origin[1],stuff.origin[2],stuff.origin[3]), bsize = stuff.bsize } )
		end
		
		print("--> Loaded Exploit Boxes!")
		
	end
	
end

function GM:MapExploitWrite()
	local path = "darkestdays/exploits/"..game.GetMap()..".txt"
	
	if #MapExploits <= 0 then 
		if file.Exists( path, "DATA" ) then
			file.Delete( path, "DATA" )
		end
		
		return 
	end
	
	local tbl = {}
	
	for k, v in pairs( MapExploits ) do
		local minitbl = {origin = {v.origin.x,v.origin.y,v.origin.z}, bsize = v.bsize}
		table.insert(tbl,minitbl)
	end
	
	file.Write( path, util.TableToJSON(tbl) )
end

local player_GetAll = player.GetAll
--local function InsertTBL(tbl, player)
--    tbl[#tbl + 1] = player
--end

local MapExploitDelay = 0
--local NextPlayerCache = 0
--local players = {}

local vec_0_0_3 = Vector( 0,0,3 )

local function MapExploitThink()
	
	if #MapExploits <= 0 then return end
	
	MapExploitDelay = MapExploitDelay or 0
	
	if MapExploitDelay >= CurTime() then return end
	
	MapExploitDelay = CurTime()+0.01
	
	local vec = nil
	local sz = 0
	
	for index, pl in ipairs ( player_GetAll() ) do
		for k, v in ipairs(MapExploits) do
			sz = v.bsize
			vec = Vector(sz,sz,sz)
			
			local Min = v.origin - vec
			local Max = v.origin + vec
		
			local Pos = pl:GetPos() + vec_0_0_3
			
			if IsValid(pl) and pl:IsPlayer() and pl:Alive() and not (IsValid(pl:GetActiveWeapon()) and pl:GetActiveWeapon():GetClass() == "admin_exploitblocker") then
				if Pos.x < Max.x and Pos.y < Max.y and Pos.z < Max.z and Pos.x > Min.x and Pos.y > Min.y and Pos.z > Min.z then	
					local message = ""
					local old_velocity = pl:GetVelocity():Length()
					pl:SetLocalVelocity( vector_origin )
					pl:SetVelocity( (pl:GetPos()-v.origin):GetNormal() * ( pl:GetVelocity():Length() + 100 ) )
					//pl:SetVelocity( (pl:GetPos()-v.origin):GetNormal()*600 )
					message = translate.ClientGet( pl, "exploit_block" )
				
					pl.LastExploitWarning = pl.LastExploitWarning or 0
					if pl.LastExploitWarning < CurTime() then
					
						local e = EffectData()
							e:SetOrigin( v.origin )
							e:SetRadius( v.bsize )
							e:SetEntity( pl )
						util.Effect( "exploit_block", e, true, true )
						
						pl:TakeDamage( old_velocity > 1000 and 9999 or 20, pl, pl )
						pl:ChatPrint(message)
						pl.LastExploitWarning = CurTime() + 2 
					end
				end
			end
		end
	end
	
end
hook.Add("Think","mapexploitthink",MapExploitThink)

function IsBlockedPosition(Pos)
	
	if #MapExploits <= 0 then return false end
	
	for k, v in ipairs( MapExploits ) do
		sz = v.bsize
		vec = Vector(sz,sz,sz)
			
		local Min = v.origin - vec
		local Max = v.origin + vec
		
		if Pos.x < Max.x and Pos.y < Max.y and Pos.z < Max.z and Pos.x > Min.x and Pos.y > Min.y and Pos.z > Min.z then	
			return true
		end
			
	end
	return false
end
